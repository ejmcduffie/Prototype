'use client';

import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { FileList } from '@/components/dashboard/FileList';

// Define types for our data
export interface FileUpload {
  _id: string;
  originalName: string;
  fileType: string;
  fileSize: number;
  fileCategory: string;
  uploadDate: string;
  status: 'Pending' | 'Processing' | 'Verified' | 'Failed' | 'NFT_Minted';
  nftDetails?: {
    tokenId: string;
    contractAddress: string;
    transactionHash: string;
    tokenUri: string;
    mintDate: string;
    blockchain: string;
    owner: string;
  };
}

interface PaginationInfo {
  total: number;
  page: number;
  limit: number;
  totalPages: number;
  hasMore: boolean;
}

// Generate mock data for unauthenticated users
const generateMockData = (): FileUpload[] => {
  const mockStatuses: ('Pending' | 'Processing' | 'Verified' | 'Failed' | 'NFT_Minted')[] = 
    ['Pending', 'Processing', 'Verified', 'Failed', 'NFT_Minted'];
  const mockCategories = ['Census', 'Birth Certificate', 'Marriage Record', 'Death Certificate', 'Military Record'];
  const mockFiles: FileUpload[] = [];
  
  for (let i = 1; i <= 5; i++) {
    const status = mockStatuses[Math.floor(Math.random() * mockStatuses.length)];
    const category = mockCategories[Math.floor(Math.random() * mockCategories.length)];
    const hasNft = status === 'NFT_Minted';
    
    mockFiles.push({
      _id: `mock-${i}`,
      originalName: `${category.replace(/\s+/g, '_').toLowerCase()}_${i}.pdf`,
      fileType: 'application/pdf',
      fileSize: Math.floor(Math.random() * 5000000) + 100000, // 100KB - 5MB
      fileCategory: category,
      uploadDate: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000).toISOString(),
      status,
      ...(hasNft ? {
        nftDetails: {
          tokenId: `0x${Math.random().toString(16).substr(2, 40)}`,
          contractAddress: '0x1234...5678',
          transactionHash: '0x' + Math.random().toString(16).substr(2, 64),
          tokenUri: 'ipfs://mock-ipfs-hash',
          mintDate: new Date().toISOString(),
          blockchain: 'Ethereum',
          owner: '0x' + Math.random().toString(16).substr(2, 40)
        }
      } : {})
    });
  }
  
  return mockFiles;
};

export default function Dashboard() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [files, setFiles] = useState<FileUpload[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [statusFilter, setStatusFilter] = useState<string>('');
  const [categoryFilter, setCategoryFilter] = useState<string>('');
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [isProcessingMint, setIsProcessingMint] = useState<string | null>(null);
  const [pagination, setPagination] = useState<PaginationInfo>({
    total: 0,
    page: 1,
    limit: 10,
    totalPages: 0,
    hasMore: false,
  });
  
  const isAuthenticated = status === 'authenticated';

  // Load files based on authentication status
  const loadFiles = useCallback(async () => {
    setIsLoading(true);
    setError(null);

    try {
      if (isAuthenticated) {
        // Fetch real data for authenticated users
        const response = await fetch(`/api/files?status=${statusFilter}&category=${categoryFilter}&page=${pagination.page}&limit=${pagination.limit}&search=${searchQuery}`);
        if (!response.ok) throw new Error('Failed to fetch files');
        const data = await response.json();
        setFiles(data.files);
        setPagination({
          total: data.total,
          page: data.page,
          limit: data.limit,
          totalPages: data.totalPages,
          hasMore: data.hasMore,
        });
      } else {
        // Use mock data for unauthenticated users
        setFiles(generateMockData());
        setPagination({
          total: 5,
          page: 1,
          limit: 10,
          totalPages: 1,
          hasMore: false,
        });
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while loading files');
      console.error('Error loading files:', err);
    } finally {
      setIsLoading(false);
    }
  }, [isAuthenticated, statusFilter, categoryFilter, pagination.page, pagination.limit, searchQuery]);

  // Handle NFT minting
  const handleMintNFT = async (fileId: string) => {
    if (isProcessingMint || !isAuthenticated) return;
    
    setIsProcessingMint(fileId);
    try {
      const response = await fetch('/api/nft/mint', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fileId }),
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to mint NFT');
      }
      
      // Refresh the files list
      await loadFiles();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to mint NFT');
    } finally {
      setIsProcessingMint(null);
    }
  };

  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  // Format file size for display
  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return bytes + ' bytes';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  // Get status badge color
  const getStatusColor = (status: string) => {
    switch(status) {
      case 'Pending': return 'bg-gray-100 text-gray-800';
      case 'Processing': return 'bg-blue-100 text-blue-800';
      case 'Verified': return 'bg-green-100 text-green-800';
      case 'Failed': return 'bg-red-100 text-red-800';
      case 'NFT_Minted': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Get status icon
  const getStatusIcon = (status: string) => {
    switch(status) {
      case 'Verified':
      case 'NFT_Minted':
        return '✓';
      case 'Failed':
        return '✗';
      case 'Processing':
        return '⟳';
      default:
        return '⋯';
    }
  };

  // Load files on mount and when dependencies change
  useEffect(() => {
    loadFiles();
  }, [loadFiles]);

  // Filter files based on search and filters
  const filteredFiles = files.filter(file => {
    const matchesSearch = searchQuery === '' || 
      file.originalName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      file.fileCategory.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesStatus = statusFilter === '' || file.status === statusFilter;
    const matchesCategory = categoryFilter === '' || file.fileCategory === categoryFilter;
    
    return matchesSearch && matchesStatus && matchesCategory;
  });

  if (status === 'loading') {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">
          {isAuthenticated ? 'Your Documents' : 'Example Documents'}
        </h1>
        {isAuthenticated && (
          <Link 
            href="/upload" 
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
          >
            Upload New
          </Link>
        )}
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert">
          <span className="block sm:inline">{error}</span>
          <button 
            className="absolute top-0 bottom-0 right-0 px-4 py-3"
            onClick={() => setError(null)}
          >
            <span className="sr-only">Dismiss</span>
            <span aria-hidden="true">×</span>
          </button>
        </div>
      )}

      {/* Filters */}
      <div className="bg-white shadow rounded-lg p-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
              Search
            </label>
            <input
              type="text"
              id="search"
              placeholder="Search documents..."
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              disabled={!isAuthenticated}
            />
          </div>
          
          <div>
            <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
              Status
            </label>
            <select
              id="status"
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              disabled={!isAuthenticated}
            >
              <option value="">All Statuses</option>
              <option value="Pending">Pending</option>
              <option value="Processing">Processing</option>
              <option value="Verified">Verified</option>
              <option value="Failed">Failed</option>
              <option value="NFT_Minted">NFT Minted</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
              Category
            </label>
            <select
              id="category"
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              value={categoryFilter}
              onChange={(e) => setCategoryFilter(e.target.value)}
              disabled={!isAuthenticated}
            >
              <option value="">All Categories</option>
              <option value="Census">Census</option>
              <option value="Birth Certificate">Birth Certificate</option>
              <option value="Marriage Record">Marriage Record</option>
              <option value="Death Certificate">Death Certificate</option>
              <option value="Military Record">Military Record</option>
            </select>
          </div>
        </div>
        
        {!isAuthenticated && (
          <div className="mt-4 text-sm text-yellow-600 bg-yellow-50 p-3 rounded-md">
            <p>Sign in to filter and search your own documents.</p>
          </div>
        )}
      </div>

      {/* File List */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        {isLoading ? (
          <div className="p-8 text-center">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-4 border-blue-500 border-t-transparent"></div>
            <p className="mt-2 text-gray-600">Loading documents...</p>
          </div>
        ) : (
          <FileList 
            files={filteredFiles}
            isAuthenticated={isAuthenticated}
            onMintNFT={handleMintNFT}
            isProcessingMint={isProcessingMint}
            formatDate={formatDate}
            formatFileSize={formatFileSize}
            getStatusColor={getStatusColor}
            getStatusIcon={getStatusIcon}
          />
        )}
      </div>
    </div>
  );
}
